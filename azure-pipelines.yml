# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
- azure-serverless

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'TestConnection'

  # Function app name
  functionAppName: 'azurekeyvaultbackend'

  # Agent VM image name
  #storage
  storage: 'azurekeyvaultfrontend'

  #container
  ContainerName: '$web'

  # Agent VM image name
  vmImageName: 'windows-latest'

  # Working Directory for function app
  functionAppworkingDirectory: '$(System.DefaultWorkingDirectory)/AzureKeyVault'

  # Working Directory for Angular
  angularWorkingDirectory: '$(System.DefaultWorkingDirectory)/AzureWeb'

  #Setting the configuration variables
  configuration.baseApiUrl: 'https://azurekeyvaultbackend.azurewebsites.net' 
  configuration.clientID: '8c3dad1d-b6bc-4f8b-939b-8263372eced6' 
  configuration.authority: 'https://login.microsoftonline.com/8c3dad1d-b6bc-4f8b-939b-8263372eced6' 
  configuration.redirectUri: 'https://azurekeyvaultfrontend.z13.web.core.windows.net/' 

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: NuGetCommand@2
      inputs:
        command: 'restore'
        restoreSolution: '**/*.sln'
        feedsToUse: 'select'
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(functionAppworkingDirectory)/*.csproj
        arguments: --output $(functionAppworkingDirectory)/publish_output --configuration Release

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(functionAppworkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop


- stage: Deploy
  displayName: Deploy Function App
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy Angular
    environment: 'development'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionApp
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'

- stage: Angular
  jobs:
  - job: Job
    pool:
      vmImage: windows-latest
    steps:
    - task: FileTransform@1
      displayName: 'File Transform: '
      inputs:
        folderPath: $(angularWorkingDirectory)/src/assets/data
        fileType: json
        targetFiles: /app.config.json
      

    - bash: |
        echo "##vso[task.setvariable variable=configuration.baseApiUrl]$(configuration.baseApiUrl)"
        echo "##vso[task.setvariable variable=configuration.clientID]$(configuration.clientID)"
        echo "##vso[task.setvariable variable=configuration.authority]$(configuration.authority)"
        echo "##vso[task.setvariable variable=configuration.redirectUri]$(configuration.redirectUri)"
    
    - task: NodeTool@0
      inputs:
        versionSpec: 10.x
      displayName: Install Node.js
    - task: CmdLine@2
      displayName: npm install -g @angular/cli
      inputs:
        script: >
          npm install -g @angular/cli
    - task: CmdLine@2
      displayName: npm install
      inputs:
        script: >
          npm install
        workingDirectory: $(angularWorkingDirectory)
    - task: CmdLine@2
      displayName: ng build --prod
      inputs:
        script: >
          ng build --prod
        workingDirectory: $(angularWorkingDirectory)
    - task: AzureFileCopy@3
      inputs:
        SourcePath: $(angularWorkingDirectory)/dist
        azureSubscription: $(azureSubscription)
        Destination: AzureBlob
        storage: $(storage)
        ContainerName: $(ContainerName)
        cleanTargetBeforeCopy: true
